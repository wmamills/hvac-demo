#!/bin/bash

MY_DIR=$(cd $(dirname $0); pwd)
. $MY_DIR/../build_common.sh

vars_common_buildroot() {
	ORIG_CPIO=virtio_msg_rootfs.cpio
	URL_CPIO_BASE=http://people.linaro.org/~manos.pitsidianakis
}

build_disk_common_buildroot() {
	vars_common_buildroot
	if [ ! -r build/disk/$ORIG_CPIO.gz ]; then
		echo "****** Fetch original buildroot rootfs cpio image"
		mkdir -p build/disk
		(cd build/disk; rm -f $ORIG_CPIO; wget $URL_CPIO_BASE/$ORIG_CPIO)
		# source is not compressed for some reason
		gzip <build/disk/$ORIG_CPIO >build/disk/$ORIG_CPIO.gz
		mkdir -p images/disk
		ln -fs ../../build/disk/$ORIG_CPIO.gz images/disk/$ORIG_CPIO.gz
	fi
}

fetch_disk_common_buildroot() {
	vars_common_buildroot
	$FETCH --image disk/$ORIG_CPIO.gz
}

do_disk_common_buildroot() {
	${MODE}_disk_common_buildroot
}

vars_disk_common_debian() {
	# make sure we have a copy of the upstream disk image
	ORIG_DISK=debian-12-nocloud-arm64.qcow2
	URL_BASE=https://cloud.debian.org/images/cloud/bookworm/latest
	BIG_DISK=debian-12-arm64-big.qcow2
}

build_disk_common_debian() {
	vars_disk_common_debian
	if [ ! -r build/disk/$ORIG_DISK ]; then
		echo "****** Fetch original debian disk image"
		mkdir -p build/disk
		(cd build/disk; wget $URL_BASE/$ORIG_DISK)
		mkdir -p images/disk
		ln -fs ../../build/disk/$ORIG_DISK images/disk/$ORIG_DISK
	fi

	# now make a copy of the template and expand it
	if [ ! -r build/disk/$BIG_DISK ]; then
		# side effect /dev/sda15 -> /dev/sda1 & /dev/sda1 -> /dev/sda2
		echo "****** resize debian disk image"
		qemu-img create -f qcow2 build/disk/debian-12-arm64-big.qcow2 10G
		virt-resize --expand /dev/sda1 \
			build/disk/$ORIG_DISK \
			build/disk/debian-12-arm64-big.qcow2
		mkdir -p images/disk
		ln -fs ../../build/disk/$BIG_DISK images/disk/$BIG_DISK
	fi
}

fetch_disk_common_debian() {
	vars_disk_common_debian
	$FETCH --image disk/$BIG_DISK
}

do_disk_common_debian() {
	${MODE}_disk_common_debian
}

buildroot_mixins_common() {
	NAME=$1; shift
	do_disk_common_buildroot

	echo "****** Create composite cpio.gz image for $NAME"

	# our mixins for minimal & composite initrd cpio
	TOP=$PWD
	rm -rf build/mixins/$NAME || true
	mkdir -p build/mixins/$NAME
	for ITEM in mixins/minimal "$@"; do
		if [ -d $ITEM ]; then
			cp -a $ITEM/. build/mixins/$NAME
		else
			case $ITEM in
			*.tar.gz)
				tar xzf $ITEM -C build/mixins/$NAME
				;;
			*)
				echo "Don't know how to handle $ITEM"
				exit 2
				;;
			esac
		fi
	done
	(cd build/mixins/$NAME; find . | fakeroot cpio -H newc -o 2>/dev/null |
		gzip >$TOP/build/mixins-$NAME.cpio.gz)

	# build the composite even if not everyone will use it
	cat images/disk/$ORIG_CPIO.gz \
		build/mixins-$NAME.cpio.gz \
		>build/$NAME-rootfs.cpio.gz
}

debian_mixins_common() {
	NAME=$1; shift

	echo "****** Create $NAME-mixins.tar.gz"
	TOP=$PWD
	rm -rf build/mixins/$NAME || true
	mkdir -p build/mixins/$NAME
	for DIR in mixins/debian "$@"; do
		cp -a $DIR/. build/mixins/$NAME
	done

	# our mixins for debian
	fakeroot tar czf build/mixins-$NAME.tar.gz -C build/mixins/$NAME .
}

build_disk_demo_xen_ffa_guest() {
	$FETCH --image target/aarch64/linux-virtio-msg-modules.tar.gz
	buildroot_mixins_common demo-xen-ffa demo-xen-ffa.d/mixins/qemu1-guest \
		images/target/aarch64/linux-virtio-msg-modules.tar.gz
}

build_disk_demo2b() {
	echo "****** Get components needed for demo2b"
	$FETCH --image target/aarch64/linux-upstream-modules.tar.gz
	buildroot_mixins_common demo2b-kvm demo2b.d/mixins/qemu2-guest{,-kvm}
	buildroot_mixins_common demo2b-xen demo2b.d/mixins/qemu2-guest \
		images/target/aarch64/linux-upstream-modules.tar.gz
}

build_disk_demo4() {
	echo "****** Get components needed for demo4"
	$FETCH --image target/aarch64/debian-12/devmem2
	$FETCH --image target/aarch64/linux-virtio-msg-amp-v1-modules.tar.gz
	cp images/target/aarch64/debian-12/devmem2 demo4.d/mixins/minimal/root
	chmod +x demo4.d/mixins/minimal/root/devmem2
	buildroot_mixins_common demo4 demo4.d/mixins/minimal \
		images/target/aarch64/linux-virtio-msg-amp-v1-modules.tar.gz
}

build_disk_debian_mixins() {
	debian_mixins_common debian \
		demo-xen-ffa.d/mixins/debian \
		demo2b.d/mixins/debian \
		demo3.d/mixins/debian \
		demo4.d/mixins/debian \
		demo-loopback.d/mixins/debian \

}

build_disk_debian() {
	do_disk_common_debian
	do_disk_common_buildroot
	(build_disk_demo_xen_ffa_guest)
	(build_disk_demo2b)
	(build_disk_debian_mixins)

	echo "****** Get components to be added to debian disk"
	rm -f build/demo*-disk.qcow2
	rm -f build/disk.qcow2

	# now make a copy of the (expanded) template
	cp images/disk/$BIG_DISK build/disk.qcow2

	# fetch anything not already built, OS generic
	# we only need to fetch things that will go into the disk
	# things that are directly booted will be fetched by the demo that uses
	# them
	for f in \
		linux-upstream-modules.tar.gz \
		linux-virtio-msg-modules.tar.gz \
		linux-virtio-msg-amp-v1-modules.tar.gz \
		linux-upstream-Image \
		linux-virtio-msg-Image \
		linux-virtio-msg-amp-v1-Image ; do
		$FETCH --image target/aarch64/$f
	done

	# fetch anything not already built, debian
	for f in \
		qemu-upstream-arm64.tar.gz \
		qemu-msg-arm64.tar.gz \
		qemu-ffa-arm64.tar.gz \
		vhost-device-i2c \
		xen-vhost-frontend \
		lb-vhost-device-i2c \
		lb-vhost-frontend \
		xen-upstream.deb \
		xen-virtio-msg.deb \
		xen-ffa.deb \
		devmem2	\
		virtio-msg-loopback \
		uio_ivshmem_test; do
		$FETCH --image target/aarch64/debian-12/$f
	done

	# add them to the disk
	echo "****** Modify a disk image copy for debian based demos"
	guestfish --rw -a build/disk.qcow2 <<EOF
run
mount /dev/sda2 /
mkdir /opt/qemu-upstream
mkdir /opt/qemu-msg
mkdir /opt/qemu-ffa
tar-in images/target/aarch64/linux-upstream-modules.tar.gz / compress:gzip
tar-in images/target/aarch64/linux-virtio-msg-modules.tar.gz / compress:gzip
tar-in images/target/aarch64/linux-virtio-msg-amp-v1-modules.tar.gz / compress:gzip
tar-in images/target/aarch64/debian-12/qemu-upstream-arm64.tar.gz /opt/qemu-upstream compress:gzip
tar-in images/target/aarch64/debian-12/qemu-msg-arm64.tar.gz /opt/qemu-msg compress:gzip
tar-in images/target/aarch64/debian-12/qemu-ffa-arm64.tar.gz /opt/qemu-ffa compress:gzip
tar-in build/mixins-debian.tar.gz / compress:gzip
upload images/target/aarch64/debian-12/vhost-device-i2c /root/vhost-device-i2c
upload images/target/aarch64/debian-12/xen-vhost-frontend /root/xen-vhost-frontend
upload images/target/aarch64/debian-12/lb-vhost-frontend /root/lb-vhost-frontend
upload images/target/aarch64/debian-12/lb-vhost-device-i2c /root/lb-vhost-device-i2c
upload images/target/aarch64/debian-12/xen-upstream.deb /root/xen-upstream.deb
upload images/target/aarch64/debian-12/xen-virtio-msg.deb /root/xen-virtio-msg.deb
upload images/target/aarch64/debian-12/xen-ffa.deb /root/xen-ffa.deb
upload images/target/aarch64/debian-12/devmem2 /root/devmem2
upload images/target/aarch64/debian-12/virtio-msg-loopback /root/virtio-msg-loopback
upload images/target/aarch64/debian-12/uio_ivshmem_test /root/uio_ivshmem_test
upload build/demo-xen-ffa-rootfs.cpio.gz  /root/demo-xen-ffa-rootfs.cpio.gz
upload build/demo2b-kvm-rootfs.cpio.gz /root/demo2b-kvm-rootfs.cpio.gz
upload build/demo2b-xen-rootfs.cpio.gz /root/demo2b-xen-rootfs.cpio.gz
upload images/target/aarch64/linux-virtio-msg-Image /root/linux-virtio-msg-Image
upload images/target/aarch64/linux-virtio-msg-amp-v1-Image /root/linux-virtio-msg-amp-v1-Image
upload images/target/aarch64/linux-upstream-Image /root/linux-upstream-Image
EOF
}

build_disk() {
	(build_disk_demo4)
	(build_disk_debian)
}

# disable kvm if there is no /dev/kvm device
# This seems to happen automatically for x86_64 but not for arm64
if [ ! -c /dev/kvm ]; then
	export LIBGUESTFS_BACKEND_SETTINGS=force_tcg
fi

main "$@"
